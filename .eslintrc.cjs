module.exports = {
  extends: [
    "airbnb",
    "airbnb-typescript",
    "airbnb/hooks",
    "prettier",
    "eslint:recommended",
    "plugin:@typescript-eslint/recommended",
    "plugin:react-hooks/recommended",
    "plugin:react/recommended",
    "plugin:prettier/recommended",
    "plugin:import/recommended",
  ],
  parser: "@typescript-eslint/parser",
  parserOptions: {
    ecmaVersion: "latest",
    sourceType: "module",
    ecmaFeatures: { jsx: true },
    project: "./tsconfig.json",
  },
  env: {
    node: true,
    browser: true,
    es2021: true,
    jest: true,
  },
  root: true,
  settings: {
    "react": {
      version: `detect`,
    },
    "import/resolver": {
      node: {
        extensions: [`.js, .cjs, .ts, .tsx`],
      },
    },
  },
  plugins: [
    "react",
    "@typescript-eslint",
    "react-hooks",
    "react-refresh",
    "prettier",
    "import",
  ],
  rules: {
    "react/react-in-jsx-scope": 0,
    "@typescript-eslint/naming-convention": `off`,
    "@typescript-eslint/no-empty-function": `off`,
    "@typescript-eslint/explicit-member-accessibility": `error`,
    "@typescript-eslint/prefer-for-of": `error`,
    "@typescript-eslint/prefer-literal-enum-member": `error`,
    "@typescript-eslint/prefer-optional-chain": `error`,
    "@typescript-eslint/sort-type-union-intersection-members": `error`,
    "@typescript-eslint/type-annotation-spacing": `error`,
    "@typescript-eslint/unified-signatures": `error`,
    "@typescript-eslint/no-unused-vars": `off`,
    "@typescript-eslint/switch-exhaustiveness-check": `error`,
    "import/no-unused-modules": `error`,
    "import/prefer-default-export": `off`,
    "prettier/prettier": "error",
    "react/no-array-index-key": `warn`,
    "react/prop-types": `off`,
    "react/require-default-props": `off`,
    "react/react-in-jsx-scope": `off`,
    "unused-imports/no-unused-imports": `error`,
    "arrow-parens": [`error`, `always`],
    "comma-dangle": [
      `error`,
      {
        arrays: `always-multiline`,
        objects: `always-multiline`,
        imports: `always-multiline`,
        exports: `always-multiline`,
        functions: `only-multiline`,
      },
    ],
    "consistent-return": `off`,
    "curly": [`error`, `multi-line`, `consistent`],
    "function-paren-newline": `off`,
    "implicit-arrow-linebreak": `off`,
    "jsx-quotes": [`error`, `prefer-double`],
    "keyword-spacing": [
      `error`,
      {
        overrides: {
          if: { after: true },
          while: { after: true },
          for: { after: true },
          switch: { after: true },
          catch: { after: true },
        },
      },
    ],
    "max-classes-per-file": `off`,
    "max-len": [
      `error`,
      {
        code: 81,
        ignoreRegExpLiterals: true,
        ignoreTemplateLiterals: true,
        ignorePattern: `^import\\s.+\\sfrom\\s.+$`,
        ignoreUrls: true,
      },
    ],
    "no-confusing-arrow": `off`,
    "no-console": `off`,
    "no-continue": `off`,
    "no-else-return": [
      `error`,
      {
        allowElseIf: true,
      },
    ],
    "no-mixed-operators": `off`,
    "no-multi-spaces": [
      `error`,
      {
        ignoreEOLComments: true,
        exceptions: {
          Property: true,
          VariableDeclarator: true,
          ImportDeclaration: true,
        },
      },
    ],
    "import/extensions": [
      "error",
      {
        ts: "never",
        tsx: "never",
        js: "never",
        jsx: "never",
        css: "always",
        scss: "always",
        jpg: "always",
        jpeg: "always",
        png: "always",
        svg: "always",
        mp3: "always",
      },
    ],
    "no-nested-ternary": `off`,
    "no-param-reassign": `off`,
    "no-plusplus": `off`,
    "no-restricted-syntax": [
      `error`,
      `ForInStatement`,
      `LabeledStatement`,
      `WithStatement`,
    ],
    "no-return-assign": `off`,
    "no-shadow": `off`,
    "no-undef-init": `off`,
    "no-underscore-dangle": `off`,
    "no-unused-expressions": [
      `error`,
      {
        allowShortCircuit: true,
        allowTernary: true,
      },
    ],
    "no-use-before-define": `off`,
    "nonblock-statement-body-position": `off`,
    "object-curly-newline": [
      `error`,
      {
        consistent: true,
      },
    ],
    "prefer-destructuring": [
      `error`,
      {
        VariableDeclarator: {
          array: false,
          object: true,
        },
        AssignmentExpression: {
          array: false,
          object: false,
        },
      },
      {
        enforceForRenamedProperties: false,
      },
    ],
    "quotes": [`error`, `backtick`],
    "quote-props": [`error`, `consistent`, { unnecessary: false }],
    "semi": [`error`, `never`],
    "semi-style": [`error`, `last`],
    "import/order": [
      `error`,
      {
        "groups": [
          `builtin`,
          `external`,
          "parent",
          "sibling",
          "index",
          `internal`,
        ],
        "pathGroups": [
          {
            pattern: `react`,
            group: `external`,
            position: `before`,
          },
        ],
        "pathGroupsExcludedImportTypes": [`react`],
        "newlines-between": `always`,
        "alphabetize": {
          order: `asc`,
          caseInsensitive: true,
        },
      },
    ],
  },
}
